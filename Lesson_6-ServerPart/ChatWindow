
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Scanner;


public class ChatWindow extends JFrame {

    //Создаем ссылку поля для ввода текста
    private JTextField jTextField;

    //Создаем ссылку  окна переписки
    private JTextArea jTextArea;

    //Финализируем номер порта
    private final int SERVER_PORT = 8189;

    private final String SERVER_ADDRESS = "localhost";

    //Создаем ссылку на сокет
    private Socket socket;

    //Создаем ссылку обработчика входищего потока
    private Scanner in;

    //Создаем ссылку обработчика исходящего потока
    private PrintWriter out;

    //Кастомизируем конструктор
    public ChatWindow(){

        try{
            //Создаем сокет
            socket = new Socket(SERVER_ADDRESS, SERVER_PORT);
            //Создаем обработчик входящего потока
            in = new Scanner(socket.getInputStream());
            //Создаем обработчик исходящего потока
            out = new PrintWriter(socket.getOutputStream());
        }catch(IOException e){
            e.printStackTrace();
        }

        //Делаем разметку пользовательского интерфейса клиента

        //Заголовок
        setTitle("Chat");
        //Определяем размер окна
        setSize(400,400);
        //Позиционируем по центру экрана
        setLocationRelativeTo(null);
        //Прописываем ействие закрытия программы
        setDefaultCloseOperation((WindowConstants.EXIT_ON_CLOSE));

        //Создаем окно переписки
        jTextArea = new JTextArea();
        //Запрещаем редактировать окно переписки
        jTextArea.setEditable(false);
        //Активируем метод переноса текста в окне переписки
        jTextArea.setLineWrap(true);

        //Создаем прокрутку, и привязываем ее к окну переписки
        JScrollPane jScrollPane = new JScrollPane(jTextArea);

        //Создаем контейнер панели (фон)
        JPanel jPanel = new JPanel();
        jPanel.setLayout(new BorderLayout());
        //Определяем размеры контейнера
        jPanel.setPreferredSize(new Dimension(200,50));

        //Созадем кнопочку
        JButton send = new JButton("Send");

        //Создаем полле ввода текста
        jTextField = new JTextField();
        //Определяем размер поля ввода текста
        jTextField.setPreferredSize(new Dimension(200, 50));

        //Привязываем к кнопке Send слушателя
        send.addActionListener(new ActionListener() {

            //реализуем метод actionPerformed
            @Override
            public void actionPerformed(ActionEvent e){
                sendMessage();
            }
        });

        //Привязываем к полю ввода текста слушателя
        jTextField.addActionListener(new ActionListener() {
            //реализуем метод actionPerformed
            @Override
            public void actionPerformed(ActionEvent e){
                sendMessage();
            }
        });

        //Добавляем в контейнер кнопку send справа
        jPanel.add(send, BorderLayout.EAST);
        //Доавляем в контейнер поле ввода текста
        jPanel.add(jTextField, BorderLayout.CENTER);
        //Доавляем в контейнер полосу прокрутки
        add(jScrollPane, BorderLayout.CENTER);
        //Добавляем контейнер вниз
        add(jPanel, BorderLayout.SOUTH);
        //Делаем интерфейс видимым
        setVisible(true);

        //Созадем поток
        new Thread(new Runnable() {
            //Прописываем алгоритм, который будет выполняться в потоке
            @Override
            public void run(){
            //Запускае бесконечный цикл работы потока
                while(true){
                    //В рамках цикла опрашиваем входящий поток на наличие входящего сособщения
                    if(in.hasNext()){
                        //Если сообщение есть - вносим его в переменную string
                        String string = in.nextLine();
                        //Отлбражаем содержание Stringy в окне переписки и переносим курсор на новую строку
                        jTextArea.append(string + "\n");
                    }
                }
            }
            //Статуем поток
        }).start();

    }
    //Определяем метод отправки сообщения
    public void sendMessage(){
        //отправляем в обработчик исходящео потока содеримое поля ввода теста
        out.println(jTextField.getText());
        //очищаем буфер обмена
        out.flush();
        //эмммм, посмотреть, как это работает
        jTextField.setText("");
    }


}

