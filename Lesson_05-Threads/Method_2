public class Method_2 {


    public void mass(int size){
        float[] mass = new float[size];

        for (int i = 0; i <mass.length ; i++) {
            mass[i] = 1;
        }
        //Содаем Массив получатель 1
        float[] mass2 = new float[size/2];
        //Содаем Массив получатель 2
        float[] mass3 = new float[size/2];

        //Начали мерять
        long a = System.currentTimeMillis();

        //Копируем первую часть массива
        System.arraycopy(mass,0, mass2, 0,size/2);

        //Копируем вторую часть массива
        System.arraycopy(mass,size/2, mass3, 0,size/2);

        //Создаем потоки

        //Поток 1 работает с Первой половиной массива
        Thread thread1 = new Thread(new Runnable(){
            @Override
            public void run(){


                for (int i = 0; i <mass2.length ; i++) {
                    mass2[i] = (float)(mass2[i] * Math.sin(0.2f + i / 5) * Math.cos(0.2f + i / 5) * Math.cos(0.4f + i / 2));

                }
            }
        });

        //Поток 2 работает со Второй половиной массива
        Thread thread2 = new Thread(new Runnable(){
            @Override
            public void run(){

                for (int i = 5000000; i <mass3.length ; i++) {
                    mass3[i] = (float)(mass3[i] * Math.sin(0.2f + i / 5) * Math.cos(0.2f + i / 5) * Math.cos(0.4f + i / 2));
                }
                System.out.println("Посчитал");
            }
        });

        //Стартуем потоки
        thread1.start();
        thread2.start();

        //Дожидаемся завершеня выполнения потоков
        try {
            thread1.join();
            thread2.join();
        }
        catch (InterruptedException e) {
            e.printStackTrace();
        }


        //Склеиваем Массивы
        System.arraycopy(mass2, 0, mass, 0,mass2.length);
        System.arraycopy(mass3,0,mass,mass.length/2, mass3.length);

        // Смотрим время

        System.currentTimeMillis();
        System.out.println(System.currentTimeMillis() - a);


    }
}
