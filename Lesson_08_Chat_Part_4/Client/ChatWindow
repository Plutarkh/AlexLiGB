package Client;

import Server.ServerConst;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Scanner;



public class ChatWindow extends JFrame implements ServerConst {

    //Создаем ссылку на логику соединения;
    private ClientConnection client;

    //Создаем ссылку поля для ввода текста
    private JTextField jTextField;

    //Создаем ссылку  окна переписки
    private JTextArea jTextArea;
    //Ссылку на список полльзователей он- лайн
    private JTextArea userList;
    private JScrollPane jspUsers;

    //Создаем панель для ввода логина и пароля
    private JTextField jtflogin;
    private JPasswordField jtfpassword;
    private JPanel top;
    private JPanel jPanelBottom;




    //Создаем ссылку на сокет
    private Socket socket;

    //Создаем ссылку обработчика входищего потока
    private Scanner in;

    //Создаем ссылку обработчика исходящего потока
    private PrintWriter out;

    //Кастомизируем конструктор
    public ChatWindow(){

        //Создае экземпляр Клинт коннекшен для запуска логики соединения

        client = new ClientConnection();
        client.init(this);

        //Делаем разметку пользовательского интерфейса клиента

        //Заголовок
        setTitle("Let's Talk!");
        //Определяем размер окна
        setSize(480,400);
        //Позиционируем по центру экрана
        setLocationRelativeTo(null);
        //Прописываем действие закрытия программы
        setDefaultCloseOperation((WindowConstants.EXIT_ON_CLOSE));



        //Создаем окно переписки
        jTextArea = new JTextArea();

        //Создаем список пользователей
         userList = new JTextArea();


        //Запрещаем редактировать окно переписки
        jTextArea.setEditable(false);
        //Активируем метод переноса текста в окне переписки
        jTextArea.setLineWrap(true);
        //Делаем список пользователей не редактируемым по размерам
        userList.setEditable(false);
        //Устанавливаем размер для Списка пользователей
        userList.setPreferredSize(new Dimension(95, 1));
        //Полоса прокрутки для листа пользователей
        jspUsers = new JScrollPane(userList);

        //Создаем прокрутку, и привязываем ее к окну переписки
        JScrollPane jScrollPane = new JScrollPane(jTextArea);

        //Создаем контейнер панели (фон)
        JPanel jPanel = new JPanel();
        jPanel.setLayout(new BorderLayout());
        //Определяем размеры контейнера
        jPanel.setPreferredSize(new Dimension(200,50));

        //Созадем кнопочку
        JButton send = new JButton("   Talk!   ");

        //Создаем полле ввода текста
        jTextField = new JTextField();
        //Определяем размер поля ввода текста
        jTextField.setPreferredSize(new Dimension(200, 50));

        //Создаем поле ввода логина и пароля
        jtflogin = new JTextField();
        jtfpassword = new JPasswordField();
        //Создали кнопочку Login
        JButton jbAuth = new JButton("LogIn");
        //Создали колонку на 3
        top = new JPanel(new GridLayout(1,3));
        //Разместили в колонке элименты
        top.add(jtflogin);
        top.add(jtfpassword);
        top.add(jbAuth);




        //Привязываем к кнопке Send слушателя
        send.addActionListener(new ActionListener() {

            //реализуем метод actionPerformed
            @Override
            public void actionPerformed(ActionEvent e){
                sendMessage();
            }
        });

        //Привязываем к полю ввода текста слушателя
        jTextField.addActionListener(new ActionListener() {
            //реализуем метод actionPerformed
            @Override
            public void actionPerformed(ActionEvent e){
                sendMessage();
            }
        });

        //Привязываем к кнопке Login слушателя
        jbAuth.addActionListener(new ActionListener() {

            //реализуем метод actionPerformed
            @Override
            public void actionPerformed(ActionEvent e){
                auth();
            }
        });



        jPanelBottom = new JPanel();
        //Добавляем в контейнер кнопку send справа
        jPanel.add(send, BorderLayout.EAST);
        //Доавляем в контейнер поле ввода текста
        jPanel.add(jTextField, BorderLayout.CENTER);
        //Доавляем в контейнер полосу прокрутки
        add(jScrollPane, BorderLayout.CENTER);
        //Добавляем контейнер вниз
        add(jPanel, BorderLayout.SOUTH);
        //Позиционируем список пользователей на
        add(jspUsers, BorderLayout.EAST);
        //Добавляем в контейнер панельку авторизации
        add(top, BorderLayout.NORTH);

        //Закываем соединение с сервером после закоытия окна
        addWindowFocusListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                super.windowClosing(e);
                try {
                    client.disconnect();
                } catch (Exception e1) {
                    e1.printStackTrace();
                }
            }
        });

        //Делаем интерфейс видимым
        switchWindows();//Проверяем на авторизацию, переключаем окна видимости
        setVisible(true);



        //Созадем поток
        new Thread(new Runnable() {
            //Прописываем алгоритм, который будет выполняться в потоке
            @Override
            public void run(){
                //Запускае бесконечный цикл работы потока
                while(true){
                    //В рамках цикла опрашиваем входящий поток на наличие входящего сособщения
                    if(in.hasNext()){
                        //Если сообщение есть - вносим его в переменную string
                        String string = in.nextLine();

                    }
                }
            }
            //Статуем поток
        }).start();

    }
    //Определяем метод отправки сообщения
    public void sendMessage(){

        //Забираем текст из текстового поля и переносим в msg
        String msg = jTextField.getText();


        //эмммм, посмотреть, как это работает
        jTextField.setText("");
        client.sendMessage(msg);
    }

    //Метод передчи сообщения от сервера в текстовое поле
    public void showMessage(String msg){
        jTextArea.append(msg + "\n");

        //Система для скроллинга всех сообщений у всех клиентов
        jTextArea.setCaretPosition(jTextArea.getDocument().getLength());

    }


    //Определяем метод авторизации
    public void auth(){
        //вызывает в клиенте метод auth, и передает туда ланные из строк логина и пароля,
        // пароль предварительно привядя в Стринг
        client.auth(jtflogin.getText(), new String(jtfpassword.getPassword()));
        //Очищаем сроки логина и пароля
        jtflogin.setText("");
        jtfpassword.setText("");

    }

    //Пишем методы показывающие и скрывающие панель авторизации
    public void switchWindows(){
        top.setVisible(!client.isAuthorized());
        jPanelBottom.setVisible(client.isAuthorized());
        jspUsers.setVisible(client.isAuthorized());

    }

    //Метод списка пользователей
    public void showUsersList(String[] users){
        userList.setText("");
        for (int i = 1; i <users.length ; i++) {
            userList.append(users[i] + "\n");
        }


    }


}

