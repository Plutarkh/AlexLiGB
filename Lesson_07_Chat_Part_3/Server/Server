package Server;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Vector;

public class Server implements ServerConst {

    //Создаем коллекция для хранения клиентов
    //Vector -  полностью синхронизированный ArrayList

    private Vector<ClientHandler> clients;

    //Создаем сылку на сервис авторизации и геттер на него
    private AuthService authService;
    public AuthService getAuthService() {
        return authService;
    }


    //Создаем конструктор сервера
    public Server(){

        ServerSocket server = null;
        Socket socket = null;
        clients = new Vector<>();


        // Создаем цикл для постоянного доступа сервера для новых клиентов
        //Оборачиваем все в трайкетч

        try {
            server = new ServerSocket(PORT);

            //Создаем сервис авторизации и запускаем его
            authService = new BaseAuthService();
            authService.start();

            System.out.println("Сервер запущен, ожидаем подключения клиентов");

            while (true){
                socket = server.accept();
                clients.add(new ClientHandler(this,socket));
                System.out.println("Клиент подключен");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }finally {

        }
    }
    /////////////////////////////////////////////////////////////////////////
    //Создаем метод для отправки ЛС
    public void sendPrivateMessage(String name, String pMsg, String toNick){
        //отправляем ЛС получателю
        for (int j = 0; j < clients.size(); j++) {
            if (toNick.contains(clients.get(j).getNick())) clients.get(j).sendMessage("ЛС от "+ name + ": " + pMsg);
            }

        //отправляем ЛС отправителю
        for (int i = 0; i <clients.size() ; i++) {
            if (name.contains(clients.get(i).getNick())) clients.get(i).sendMessage("ЛС для "+ toNick + ": " + pMsg);


        }
    }
    /////////////////////////////////////////////////////////////////////////

    //Создаем метод для отправки сообщений всем
    public void broadcast(String msg){

        //Проходимся по всем клиентам из списка и отправляем им сообщения

        for (int i = 0; i <clients.size() ; i++) {
            clients.get(i).sendMessage(msg);
        }
    }

    //Создаем метод отключения от чата
    public void unSubscribeMe(ClientHandler c){
    clients.remove(c);
    }

    //Проверяем Ник на задвоение при авторизации
    public boolean isNickBusy(String nick){
        for(ClientHandler client: clients){
            if (client.getNick().equals(nick)) return true;
        }
        return false;
    }

    //Создаем метод отправки приветсвия
    public void sendWelcome(String name) {
        for (int i = 0; i < clients.size(); i++) {
            if (clients.get(i).getNick().equals(name))
                clients.get(i).sendMessage( "Приветствуем Вас в чате Lat's Talk!" + "\n" +
                        "Для управления чатом используйте следующие ключи:" + "\n" +
                        "/end - отключитья от чата" + "\n" +
                        "@nick message - отправить личное сообщение" + "\n" +
                        "Приятного общения!");

        }
    }

    }
